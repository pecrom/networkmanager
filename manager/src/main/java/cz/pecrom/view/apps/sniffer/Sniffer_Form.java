/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.pecrom.view.apps.sniffer;

import cz.pecrom.apps.sniffer.view.*;
import cz.pecrom.model.apps.sniffer.*;
import cz.pecrom.ui.*;
import org.jnetpcap.*;

import java.beans.*;
import java.util.*;

/**
 * @author pecrom
 */
public class Sniffer_Form extends javax.swing.JPanel implements PropertyChangeListener, ViewChangeListener {
  private PropertyChangeSupport pcs;


  /**
   * Creates new form Sniffer_Form
   */
  public Sniffer_Form() {
    pcs = new PropertyChangeSupport(this);
    initComponents();

    adapters.setRenderer(new InterfaceComboRenderer());
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adapters = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        packets = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        address = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        netmask = new javax.swing.JLabel();

        adapters.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        adapters.setName("adapters"); // NOI18N
        adapters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adapterSelected(evt);
            }
        });

        jLabel1.setText("Adapter");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        packets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        packets.setName("packets"); // NOI18N
        jScrollPane1.setViewportView(packets);

        jLabel2.setText("Address");
        jLabel2.setName("jLabel2"); // NOI18N

        address.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        address.setText("192.168.0.27");
        address.setName("address"); // NOI18N

        jLabel4.setText("Mask");
        jLabel4.setName("jLabel4"); // NOI18N

        netmask.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        netmask.setText("255.255.255.0");
        netmask.setName("netmask"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 624, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adapters, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(address, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(netmask, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adapters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(address)
                    .addComponent(jLabel4)
                    .addComponent(netmask))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

  private void adapterSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adapterSelected
    pcs.firePropertyChange(SnifferModel.SELECTED_ADAPTER, null, adapters.getSelectedItem());
  }//GEN-LAST:event_adapterSelected

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox adapters;
    private javax.swing.JLabel address;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel netmask;
    private javax.swing.JTable packets;
    // End of variables declaration//GEN-END:variables

  private void setAddress(String addressData) {
    address.setText(addressData);
  }

  private void setAdapters(Set<PcapIf> adaptersData) {
    adapters.removeAllItems();
    for (PcapIf adapter : adaptersData)
      adapters.addItem(adapter);
  }

  private void setNetmask(String netmaskData) {
    netmask.setText(netmaskData);
  }

  public void propertyChange(PropertyChangeEvent evt) {
    switch (evt.getPropertyName()) {
      case SnifferModel.ADDRESS:
        setAddress((String) evt.getNewValue());
        break;
      case SnifferModel.ADAPTERS:
        setAdapters((Set<PcapIf>) evt.getNewValue());
        break;
      case SnifferModel.NETMASK:
        setNetmask((String) evt.getNewValue());
        break;
    }
  }



  @Override
  public void addViewChangeListener(PropertyChangeListener listener) {
    pcs.addPropertyChangeListener(listener);
  }

  @Override
  public void removeViewChangeListener(PropertyChangeListener listener) {
    pcs.removePropertyChangeListener(listener);
  }
}
